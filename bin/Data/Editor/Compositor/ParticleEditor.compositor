
compositor_node ParticleEditorNode
{
	in 0 rt_renderwindow

	//Inform that we want to use a depth texture, the format and pool ID must match
	//We don't read the depth buffer directly from rt_renderwindow because OpenGL doesn't support it.
	//(D3D11 does though, and will work)
	texture rt0				target_width target_height PFG_RGBA8_UNORM_SRGB
	texture depthTexture	target_width target_height PFG_D32_FLOAT

	rtv rt0
	{
		depth_stencil depthTexture
	}
    
	//This depthTexture will be a copy of the original. We can read from 'depthTexture' directly, however
	//on a lot of HW reading from the depth texture means it needs to be decompressed. If you later
	//need to keep rendering using the same depth buffer (something very common in most use cases
	//for this technique) you will pay the performance price for using a decompressed buffer.
	//See section '4.1.4.2 Depth Textures' of the manual for an explanation.
	texture depthTextureCopy target_width target_height PFG_D32_FLOAT keep_content

	target rt0
	{
		pass render_quad
	  {
			load
			{
				all				clear
				clear_colour	0.0 0.0 0.0 1
			}
			store
			{
				colour	store_or_resolve
				depth	dont_care
				stencil	dont_care
			}
        
			material Postprocess/FillColour/Background
		}

		pass render_scene
		{
			overlays	off
//			shadows		ShadowMapDebuggingShadowNode   
		}
	}

	target rt_renderwindow
	{
		pass render_quad
	  {
			load
			{
				colour			dont_care
				depth	dont_care
				stencil	dont_care
			}
			store
			{
				depth	dont_care
				stencil	dont_care
			}
        
			//Ignore the alpha channel
			material Ogre/Copy/4xFP32
	    	input 0 rt0
		}
		
		pass render_scene
		{
			// We must set depth & stencil to dont_care because the
			// Window's DepthBuffer is Memoryless by default and Overlays break the pass.
			load
			{
				depth	dont_care
				stencil	dont_care
			}
			store
			{
				depth	dont_care
				stencil	dont_care
			}

			lod_update_list	off

			//Render Overlays
			overlays	on
			rq_first	254
			rq_last		255
		}
	}
    
	target depthTextureCopy
	{
		pass render_quad
		{
			load { all dont_care }
			material Postprocess/Copyback_Depth
	    	input 0 depthTexture
		}
	}
}

// Node can be defined in another file - those shadow nodes are already defined for LevelEditor
/*
abstract target cubemap_target_shadow
{
	pass render_scene
	{
		load
		{
			all									clear
			clear_colour_reverse_depth_aware	1 1 1 1
		}
		store
		{
			//We only care about the contents of the colour target with point shadows
			depth			dont_care
			stencil			dont_care
		}
		camera_cubemap_reorient true
	}
}

compositor_node_shadow ShadowMapDebuggingShadowNode
{
	technique pssm

	texture atlas		2048 7168 PFG_D32_FLOAT
	texture tmpCubemap	1024 1024 PFG_R32_FLOAT cubemap depth_format PFG_D32_FLOAT

	num_splits		3
	pssm_lambda		0.95
	shadow_map 0 atlas uv 0.0 0.000000000000000 1.0 0.285714285714286 light 0 split 0
	shadow_map 1 atlas uv 0.0 0.285714285714286 0.5 0.142857142857143 light 0 split 1
	shadow_map 2 atlas uv 0.5 0.285714285714286 0.5 0.142857142857143 light 0 split 2

	technique focused
	shadow_map 3 atlas uv 0.0 0.428571428571429 1.0 0.285714285714286 light 1
	shadow_map 4 atlas uv 0.0 0.714285714285714 1.0 0.285714285714286 light 2

	target atlas
	{
		pass clear
		{
			colour_value 1 1 1 1
		}
	}

	shadow_map_target_type directional
	{
		shadow_map 0 1 2
		{
			pass render_scene
			{
			}
		}
	}

	shadow_map_target_type directional spot
	{
		shadow_map 3 4
		{
			pass render_scene
			{
			}
		}
	}

	shadow_map_target_type point
	{
		shadow_map_repeat 3 4
		{
			target tmpCubemap +X : cubemap_target_shadow {}
			target tmpCubemap -X : cubemap_target_shadow {}
			target tmpCubemap +Y : cubemap_target_shadow {}
			target tmpCubemap -Y : cubemap_target_shadow {}
			target tmpCubemap +Z : cubemap_target_shadow {}
			target tmpCubemap -Z : cubemap_target_shadow {}

			shadow_map
			{
				pass render_quad
				{
					material Ogre/DPSM/CubeToDpsm
					input 0 tmpCubemap
				}
			}
		}
	}
}
*/

workspace ParticleEditorWorkspace
{
	connect_output ParticleEditorNode 0
}
